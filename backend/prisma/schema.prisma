// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  email     String   @unique
  password  String
  role      String   @default("customer")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cart      Cart[]
  wishlist  Wishlist[]
  orders    Order[]

  @@map("users")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admin_users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  brand          String?
  categoryId     Int?     @map("category_id")
  stockQuantity  Int      @default(0) @map("stock_quantity")
  mainImage      String?  @map("main_image")
  images         String[]
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  category   Category? @relation(fields: [categoryId], references: [id])
  cart       Cart[]
  wishlist   Wishlist[]
  orderItems OrderItem[]

  @@map("products")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  size      String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size])
  @@map("cart")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  totalAmount     Decimal  @map("total_amount") @db.Decimal(10, 2)
  status          String   @default("pending")
  paymentMethod   String?  @map("payment_method")
  shippingAddress String?  @map("shipping_address")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  size      String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
} 